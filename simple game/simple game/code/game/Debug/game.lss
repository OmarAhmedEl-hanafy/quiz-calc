
game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00000a8e  00000b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000d6  008000d6  00000b98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bce  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000952  00000000  00000000  00002912  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de3  00000000  00000000  00003264  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00004048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000562  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010b5  00000000  00000000  000047f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000058ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3d       	cpi	r26, 0xDA	; 218
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 14 02 	call	0x428	; 0x428 <main>
  8a:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
		case 'C':
		PORTC&=0xf0;
		PORTC|=value;
		case 'D':
		PORTD&=0xf0;
		PORTD|=value;
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write>:
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write+0xae>
 188:	08 95       	ret
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write+0x32>
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x64>
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x96>
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0xc8>
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_u8read>:
 252:	82 34       	cpi	r24, 0x42	; 66
 254:	d9 f0       	breq	.+54     	; 0x28c <DIO_u8read+0x3a>
 256:	18 f4       	brcc	.+6      	; 0x25e <DIO_u8read+0xc>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	31 f0       	breq	.+12     	; 0x268 <DIO_u8read+0x16>
 25c:	4d c0       	rjmp	.+154    	; 0x2f8 <DIO_u8read+0xa6>
 25e:	83 34       	cpi	r24, 0x43	; 67
 260:	39 f1       	breq	.+78     	; 0x2b0 <DIO_u8read+0x5e>
 262:	84 34       	cpi	r24, 0x44	; 68
 264:	b9 f1       	breq	.+110    	; 0x2d4 <DIO_u8read+0x82>
 266:	48 c0       	rjmp	.+144    	; 0x2f8 <DIO_u8read+0xa6>
 268:	29 b3       	in	r18, 0x19	; 25
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	06 2e       	mov	r0, r22
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_u8read+0x24>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_u8read+0x20>
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	82 23       	and	r24, r18
 27e:	93 23       	and	r25, r19
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8read+0x34>
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_u8read+0x30>
 28a:	08 95       	ret
 28c:	26 b3       	in	r18, 0x16	; 22
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	06 2e       	mov	r0, r22
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_u8read+0x48>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_u8read+0x44>
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	82 23       	and	r24, r18
 2a2:	93 23       	and	r25, r19
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_u8read+0x58>
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_u8read+0x54>
 2ae:	08 95       	ret
 2b0:	23 b3       	in	r18, 0x13	; 19
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	06 2e       	mov	r0, r22
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_u8read+0x6c>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_u8read+0x68>
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	82 23       	and	r24, r18
 2c6:	93 23       	and	r25, r19
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_u8read+0x7c>
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_u8read+0x78>
 2d2:	08 95       	ret
 2d4:	20 b3       	in	r18, 0x10	; 16
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	06 2e       	mov	r0, r22
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_u8read+0x90>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_u8read+0x8c>
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	82 23       	and	r24, r18
 2ea:	93 23       	and	r25, r19
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_u8read+0xa0>
 2ee:	95 95       	asr	r25
 2f0:	87 95       	ror	r24
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_u8read+0x9c>
 2f6:	08 95       	ret
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	08 95       	ret

000002fc <DIO_vconnectpullup>:
 2fc:	82 34       	cpi	r24, 0x42	; 66
 2fe:	19 f1       	breq	.+70     	; 0x346 <DIO_vconnectpullup+0x4a>
 300:	18 f4       	brcc	.+6      	; 0x308 <DIO_vconnectpullup+0xc>
 302:	81 34       	cpi	r24, 0x41	; 65
 304:	39 f0       	breq	.+14     	; 0x314 <DIO_vconnectpullup+0x18>
 306:	08 95       	ret
 308:	83 34       	cpi	r24, 0x43	; 67
 30a:	b1 f1       	breq	.+108    	; 0x378 <DIO_vconnectpullup+0x7c>
 30c:	84 34       	cpi	r24, 0x44	; 68
 30e:	09 f4       	brne	.+2      	; 0x312 <DIO_vconnectpullup+0x16>
 310:	4c c0       	rjmp	.+152    	; 0x3aa <DIO_vconnectpullup+0xae>
 312:	08 95       	ret
 314:	41 30       	cpi	r20, 0x01	; 1
 316:	59 f4       	brne	.+22     	; 0x32e <DIO_vconnectpullup+0x32>
 318:	2b b3       	in	r18, 0x1b	; 27
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_vconnectpullup+0x28>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_vconnectpullup+0x24>
 328:	82 2b       	or	r24, r18
 32a:	8b bb       	out	0x1b, r24	; 27
 32c:	08 95       	ret
 32e:	2b b3       	in	r18, 0x1b	; 27
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_vconnectpullup+0x3e>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_vconnectpullup+0x3a>
 33e:	80 95       	com	r24
 340:	82 23       	and	r24, r18
 342:	8b bb       	out	0x1b, r24	; 27
 344:	08 95       	ret
 346:	41 30       	cpi	r20, 0x01	; 1
 348:	59 f4       	brne	.+22     	; 0x360 <DIO_vconnectpullup+0x64>
 34a:	28 b3       	in	r18, 0x18	; 24
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_vconnectpullup+0x5a>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_vconnectpullup+0x56>
 35a:	82 2b       	or	r24, r18
 35c:	88 bb       	out	0x18, r24	; 24
 35e:	08 95       	ret
 360:	28 b3       	in	r18, 0x18	; 24
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_vconnectpullup+0x70>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_vconnectpullup+0x6c>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	88 bb       	out	0x18, r24	; 24
 376:	08 95       	ret
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	59 f4       	brne	.+22     	; 0x392 <DIO_vconnectpullup+0x96>
 37c:	25 b3       	in	r18, 0x15	; 21
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_vconnectpullup+0x8c>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_vconnectpullup+0x88>
 38c:	82 2b       	or	r24, r18
 38e:	85 bb       	out	0x15, r24	; 21
 390:	08 95       	ret
 392:	25 b3       	in	r18, 0x15	; 21
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_vconnectpullup+0xa2>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_vconnectpullup+0x9e>
 3a2:	80 95       	com	r24
 3a4:	82 23       	and	r24, r18
 3a6:	85 bb       	out	0x15, r24	; 21
 3a8:	08 95       	ret
 3aa:	41 30       	cpi	r20, 0x01	; 1
 3ac:	59 f4       	brne	.+22     	; 0x3c4 <DIO_vconnectpullup+0xc8>
 3ae:	22 b3       	in	r18, 0x12	; 18
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_vconnectpullup+0xbe>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_vconnectpullup+0xba>
 3be:	82 2b       	or	r24, r18
 3c0:	82 bb       	out	0x12, r24	; 18
 3c2:	08 95       	ret
 3c4:	22 b3       	in	r18, 0x12	; 18
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_vconnectpullup+0xd4>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_vconnectpullup+0xd0>
 3d4:	80 95       	com	r24
 3d6:	82 23       	and	r24, r18
 3d8:	82 bb       	out	0x12, r24	; 18
 3da:	08 95       	ret

000003dc <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 3dc:	62 95       	swap	r22
 3de:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 3e0:	82 34       	cpi	r24, 0x42	; 66
 3e2:	79 f0       	breq	.+30     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3e4:	18 f4       	brcc	.+6      	; 0x3ec <write_high_nibble+0x10>
 3e6:	81 34       	cpi	r24, 0x41	; 65
 3e8:	31 f0       	breq	.+12     	; 0x3f6 <write_high_nibble+0x1a>
 3ea:	08 95       	ret
 3ec:	83 34       	cpi	r24, 0x43	; 67
 3ee:	79 f0       	breq	.+30     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3f0:	84 34       	cpi	r24, 0x44	; 68
 3f2:	99 f0       	breq	.+38     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3f4:	08 95       	ret
	{
		case 'A':
		PORTA&=0x0f;
 3f6:	8b b3       	in	r24, 0x1b	; 27
 3f8:	8f 70       	andi	r24, 0x0F	; 15
 3fa:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 3fc:	8b b3       	in	r24, 0x1b	; 27
 3fe:	86 2b       	or	r24, r22
 400:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 402:	88 b3       	in	r24, 0x18	; 24
 404:	8f 70       	andi	r24, 0x0F	; 15
 406:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 408:	88 b3       	in	r24, 0x18	; 24
 40a:	86 2b       	or	r24, r22
 40c:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 40e:	85 b3       	in	r24, 0x15	; 21
 410:	8f 70       	andi	r24, 0x0F	; 15
 412:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 414:	85 b3       	in	r24, 0x15	; 21
 416:	86 2b       	or	r24, r22
 418:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 41a:	82 b3       	in	r24, 0x12	; 18
 41c:	8f 70       	andi	r24, 0x0F	; 15
 41e:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 420:	82 b3       	in	r24, 0x12	; 18
 422:	68 2b       	or	r22, r24
 424:	62 bb       	out	0x12, r22	; 18
 426:	08 95       	ret

00000428 <main>:
#include <avr/interrupt.h>

volatile int flag1=0,flag2=0;

int main(void)
{
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
        int x;
        keypad_vInit();
 42c:	0e 94 b0 03 	call	0x760	; 0x760 <keypad_vInit>
        LCD_vInit();
 430:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <LCD_vInit>
        LCD_vSend_string("3+...=8 value=");
 434:	80 e7       	ldi	r24, 0x70	; 112
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
        timer_CTC_init_interrupt();
 43c:	0e 94 35 05 	call	0xa6a	; 0xa6a <timer_CTC_init_interrupt>
        
            do{                
                           if(flag1>=1000)
                           {
                                   flag2=1;
 440:	c1 e0       	ldi	r28, 0x01	; 1
 442:	d0 e0       	ldi	r29, 0x00	; 0
        LCD_vInit();
        LCD_vSend_string("3+...=8 value=");
        timer_CTC_init_interrupt();
        
            do{                
                           if(flag1>=1000)
 444:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <flag1>
 448:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <flag1+0x1>
 44c:	88 3e       	cpi	r24, 0xE8	; 232
 44e:	93 40       	sbci	r25, 0x03	; 3
 450:	24 f0       	brlt	.+8      	; 0x45a <main+0x32>
                           {
                                   flag2=1;
 452:	d0 93 d7 00 	sts	0x00D7, r29	; 0x8000d7 <__data_end+0x1>
 456:	c0 93 d6 00 	sts	0x00D6, r28	; 0x8000d6 <__data_end>
                           }
                       x=keypad_u8check_press();
 45a:	0e 94 ed 03 	call	0x7da	; 0x7da <keypad_u8check_press>
 45e:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 460:	ef e3       	ldi	r30, 0x3F	; 63
 462:	fc e9       	ldi	r31, 0x9C	; 156
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <main+0x3c>
 468:	00 c0       	rjmp	.+0      	; 0x46a <main+0x42>
 46a:	00 00       	nop
                            _delay_ms(20);
                   }while(x==NOTPRESSED && flag2==0);                        
 46c:	8f 3f       	cpi	r24, 0xFF	; 255
 46e:	91 05       	cpc	r25, r1
 470:	d1 f4       	brne	.+52     	; 0x4a6 <main+0x7e>
 472:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 476:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <__data_end+0x1>
 47a:	89 2b       	or	r24, r25
 47c:	19 f3       	breq	.-58     	; 0x444 <main+0x1c>
 47e:	ff ef       	ldi	r31, 0xFF	; 255
 480:	23 ed       	ldi	r18, 0xD3	; 211
 482:	80 e3       	ldi	r24, 0x30	; 48
 484:	f1 50       	subi	r31, 0x01	; 1
 486:	20 40       	sbci	r18, 0x00	; 0
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <main+0x5c>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <main+0x66>
 48e:	00 00       	nop
                                
                                if(x==NOTPRESSED)
                                {
                                        _delay_ms(2000);
                                        LCD_clearscreen();
 490:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                        LCD_movecursor(2,4);
 494:	64 e0       	ldi	r22, 0x04	; 4
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
                                        LCD_vSend_string("Time over");
 49c:	8f e7       	ldi	r24, 0x7F	; 127
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 4a4:	41 c1       	rjmp	.+642    	; 0x728 <main+0x300>
                                }
                                else if (x=='5')
 4a6:	c5 97       	sbiw	r24, 0x35	; 53
 4a8:	09 f0       	breq	.+2      	; 0x4ac <main+0x84>
 4aa:	34 c1       	rjmp	.+616    	; 0x714 <main+0x2ec>
                                {
                                        LCD_vSend_string("5");
 4ac:	89 e8       	ldi	r24, 0x89	; 137
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
                                        //LCD_clearscreen();
                                        LCD_movecursor(2,4);
 4b4:	64 e0       	ldi	r22, 0x04	; 4
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
 4bc:	ef e3       	ldi	r30, 0x3F	; 63
 4be:	fc e9       	ldi	r31, 0x9C	; 156
 4c0:	31 97       	sbiw	r30, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <main+0x98>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <main+0x9e>
 4c6:	00 00       	nop
                                        _delay_ms(20);
                                        LCD_vSend_string("Well done");
 4c8:	8b e8       	ldi	r24, 0x8B	; 139
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 4d0:	ff e7       	ldi	r31, 0x7F	; 127
 4d2:	28 e3       	ldi	r18, 0x38	; 56
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	f1 50       	subi	r31, 0x01	; 1
 4d8:	20 40       	sbci	r18, 0x00	; 0
 4da:	80 40       	sbci	r24, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <main+0xae>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <main+0xb8>
 4e0:	00 00       	nop
                                        _delay_ms(50);
                                        LCD_clearscreen();
 4e2:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                        LCD_vSend_string("2+5=... value=");
 4e6:	85 e9       	ldi	r24, 0x95	; 149
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
                                        do{
                                                if(flag1>=1000)
                                                {
                                                        flag2=1;
 4ee:	c1 e0       	ldi	r28, 0x01	; 1
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
                                        LCD_vSend_string("Well done");
                                        _delay_ms(50);
                                        LCD_clearscreen();
                                        LCD_vSend_string("2+5=... value=");
                                        do{
                                                if(flag1>=1000)
 4f2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <flag1>
 4f6:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <flag1+0x1>
 4fa:	88 3e       	cpi	r24, 0xE8	; 232
 4fc:	93 40       	sbci	r25, 0x03	; 3
 4fe:	24 f0       	brlt	.+8      	; 0x508 <main+0xe0>
                                                {
                                                        flag2=1;
 500:	d0 93 d7 00 	sts	0x00D7, r29	; 0x8000d7 <__data_end+0x1>
 504:	c0 93 d6 00 	sts	0x00D6, r28	; 0x8000d6 <__data_end>
                                                }
                                                x=keypad_u8check_press();
 508:	0e 94 ed 03 	call	0x7da	; 0x7da <keypad_u8check_press>
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	ef e3       	ldi	r30, 0x3F	; 63
 510:	fc e9       	ldi	r31, 0x9C	; 156
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <main+0xea>
 516:	00 c0       	rjmp	.+0      	; 0x518 <main+0xf0>
 518:	00 00       	nop
                                                _delay_ms(20);
                                        }while(x==NOTPRESSED && flag2==0);
 51a:	8f 3f       	cpi	r24, 0xFF	; 255
 51c:	91 05       	cpc	r25, r1
 51e:	89 f4       	brne	.+34     	; 0x542 <main+0x11a>
 520:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 524:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <__data_end+0x1>
 528:	89 2b       	or	r24, r25
 52a:	19 f3       	breq	.-58     	; 0x4f2 <main+0xca>
                                        
                                        if(x==NOTPRESSED)
                                        {
                                                LCD_clearscreen();
 52c:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                                LCD_movecursor(2,4);
 530:	64 e0       	ldi	r22, 0x04	; 4
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
                                                LCD_vSend_string("Time over");
 538:	8f e7       	ldi	r24, 0x7F	; 127
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 540:	f3 c0       	rjmp	.+486    	; 0x728 <main+0x300>
                                        }
                                        else if (x=='7')
 542:	c7 97       	sbiw	r24, 0x37	; 55
 544:	09 f0       	breq	.+2      	; 0x548 <main+0x120>
 546:	db c0       	rjmp	.+438    	; 0x6fe <main+0x2d6>
                                        {
                                                LCD_vSend_string("7");
 548:	84 ea       	ldi	r24, 0xA4	; 164
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
                                                //LCD_clearscreen();
                                                LCD_movecursor(2,4);
 550:	64 e0       	ldi	r22, 0x04	; 4
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
 558:	8f e5       	ldi	r24, 0x5F	; 95
 55a:	9a ee       	ldi	r25, 0xEA	; 234
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <main+0x134>
 560:	00 c0       	rjmp	.+0      	; 0x562 <main+0x13a>
 562:	00 00       	nop
                                                _delay_ms(30);
                                                LCD_vSend_string("Well done");
 564:	8b e8       	ldi	r24, 0x8B	; 139
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 56c:	9f e7       	ldi	r25, 0x7F	; 127
 56e:	e8 e3       	ldi	r30, 0x38	; 56
 570:	f1 e0       	ldi	r31, 0x01	; 1
 572:	91 50       	subi	r25, 0x01	; 1
 574:	e0 40       	sbci	r30, 0x00	; 0
 576:	f0 40       	sbci	r31, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <main+0x14a>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0x154>
 57c:	00 00       	nop
                                                _delay_ms(50);
                                                LCD_clearscreen();
 57e:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                                LCD_vSend_string("...*2=6 value=");
 582:	86 ea       	ldi	r24, 0xA6	; 166
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
                                                do{
                                                        if(flag1>=1000)
                                                        {
                                                                flag2=1;
 58a:	c1 e0       	ldi	r28, 0x01	; 1
 58c:	d0 e0       	ldi	r29, 0x00	; 0
                                                LCD_vSend_string("Well done");
                                                _delay_ms(50);
                                                LCD_clearscreen();
                                                LCD_vSend_string("...*2=6 value=");
                                                do{
                                                        if(flag1>=1000)
 58e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <flag1>
 592:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <flag1+0x1>
 596:	88 3e       	cpi	r24, 0xE8	; 232
 598:	93 40       	sbci	r25, 0x03	; 3
 59a:	24 f0       	brlt	.+8      	; 0x5a4 <main+0x17c>
                                                        {
                                                                flag2=1;
 59c:	d0 93 d7 00 	sts	0x00D7, r29	; 0x8000d7 <__data_end+0x1>
 5a0:	c0 93 d6 00 	sts	0x00D6, r28	; 0x8000d6 <__data_end>
                                                        }
                                                        x=keypad_u8check_press();
 5a4:	0e 94 ed 03 	call	0x7da	; 0x7da <keypad_u8check_press>
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	ef e3       	ldi	r30, 0x3F	; 63
 5ac:	fc e9       	ldi	r31, 0x9C	; 156
 5ae:	31 97       	sbiw	r30, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <main+0x186>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <main+0x18c>
 5b4:	00 00       	nop
                                                        _delay_ms(20);
                                                }while(x==NOTPRESSED && flag2==0);
 5b6:	8f 3f       	cpi	r24, 0xFF	; 255
 5b8:	91 05       	cpc	r25, r1
 5ba:	b9 f4       	brne	.+46     	; 0x5ea <main+0x1c2>
 5bc:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 5c0:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <__data_end+0x1>
 5c4:	89 2b       	or	r24, r25
 5c6:	19 f3       	breq	.-58     	; 0x58e <main+0x166>
 5c8:	8f e3       	ldi	r24, 0x3F	; 63
 5ca:	9c e9       	ldi	r25, 0x9C	; 156
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <main+0x1a4>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <main+0x1aa>
 5d2:	00 00       	nop
                                                
                                                if(x==NOTPRESSED)
                                                {
                                                        _delay_ms(20);
                                                        LCD_clearscreen();
 5d4:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                                        LCD_movecursor(2,4);
 5d8:	64 e0       	ldi	r22, 0x04	; 4
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
                                                        LCD_vSend_string("Time over");
 5e0:	8f e7       	ldi	r24, 0x7F	; 127
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 5e8:	9f c0       	rjmp	.+318    	; 0x728 <main+0x300>
                                                }
                                                else if (x=='3')
 5ea:	c3 97       	sbiw	r24, 0x33	; 51
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <main+0x1c8>
 5ee:	7c c0       	rjmp	.+248    	; 0x6e8 <main+0x2c0>
                                                {
                                                        LCD_vSend_string("3");
 5f0:	85 eb       	ldi	r24, 0xB5	; 181
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 5f8:	ef e3       	ldi	r30, 0x3F	; 63
 5fa:	fc e9       	ldi	r31, 0x9C	; 156
 5fc:	31 97       	sbiw	r30, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <main+0x1d4>
 600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x1da>
 602:	00 00       	nop
                                                        //LCD_clearscreen();
                                                        _delay_ms(20);
                                                        LCD_movecursor(2,4);
 604:	64 e0       	ldi	r22, 0x04	; 4
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
                                                        LCD_vSend_string("Well done");
 60c:	8b e8       	ldi	r24, 0x8B	; 139
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 614:	ff ef       	ldi	r31, 0xFF	; 255
 616:	23 ef       	ldi	r18, 0xF3	; 243
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	f1 50       	subi	r31, 0x01	; 1
 61c:	20 40       	sbci	r18, 0x00	; 0
 61e:	80 40       	sbci	r24, 0x00	; 0
 620:	e1 f7       	brne	.-8      	; 0x61a <main+0x1f2>
 622:	00 c0       	rjmp	.+0      	; 0x624 <main+0x1fc>
 624:	00 00       	nop
                                                        _delay_ms(80);
                                                        LCD_clearscreen();
 626:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                                        LCD_vSend_string("18/2=... value=");
 62a:	87 eb       	ldi	r24, 0xB7	; 183
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
                                                        do{
                                                                if(flag1>=1000)
                                                                {
                                                                        flag2=1;
 632:	c1 e0       	ldi	r28, 0x01	; 1
 634:	d0 e0       	ldi	r29, 0x00	; 0
                                                        LCD_vSend_string("Well done");
                                                        _delay_ms(80);
                                                        LCD_clearscreen();
                                                        LCD_vSend_string("18/2=... value=");
                                                        do{
                                                                if(flag1>=1000)
 636:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <flag1>
 63a:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <flag1+0x1>
 63e:	88 3e       	cpi	r24, 0xE8	; 232
 640:	93 40       	sbci	r25, 0x03	; 3
 642:	24 f0       	brlt	.+8      	; 0x64c <main+0x224>
                                                                {
                                                                        flag2=1;
 644:	d0 93 d7 00 	sts	0x00D7, r29	; 0x8000d7 <__data_end+0x1>
 648:	c0 93 d6 00 	sts	0x00D6, r28	; 0x8000d6 <__data_end>
                                                                }
                                                                x=keypad_u8check_press();
 64c:	0e 94 ed 03 	call	0x7da	; 0x7da <keypad_u8check_press>
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	ef e3       	ldi	r30, 0x3F	; 63
 654:	fc e9       	ldi	r31, 0x9C	; 156
 656:	31 97       	sbiw	r30, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <main+0x22e>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0x234>
 65c:	00 00       	nop
                                                                _delay_ms(20);
                                                        }while(x==NOTPRESSED && flag2==0);
 65e:	8f 3f       	cpi	r24, 0xFF	; 255
 660:	91 05       	cpc	r25, r1
 662:	b9 f4       	brne	.+46     	; 0x692 <main+0x26a>
 664:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 668:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <__data_end+0x1>
 66c:	89 2b       	or	r24, r25
 66e:	19 f3       	breq	.-58     	; 0x636 <main+0x20e>
 670:	8f e3       	ldi	r24, 0x3F	; 63
 672:	9c e9       	ldi	r25, 0x9C	; 156
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <main+0x24c>
 678:	00 c0       	rjmp	.+0      	; 0x67a <main+0x252>
 67a:	00 00       	nop
                                                        
                                                        if(x==NOTPRESSED)
                                                        {
                                                                _delay_ms(20);
                                                                LCD_clearscreen();
 67c:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                                                LCD_movecursor(2,4);
 680:	64 e0       	ldi	r22, 0x04	; 4
 682:	82 e0       	ldi	r24, 0x02	; 2
 684:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
                                                                LCD_vSend_string("Time over");
 688:	8f e7       	ldi	r24, 0x7F	; 127
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 690:	4b c0       	rjmp	.+150    	; 0x728 <main+0x300>
                                                        }
                                                        else if (x=='9')
 692:	c9 97       	sbiw	r24, 0x39	; 57
 694:	f1 f4       	brne	.+60     	; 0x6d2 <main+0x2aa>
                                                        {
                                                                LCD_vSend_string("9");
 696:	87 ec       	ldi	r24, 0xC7	; 199
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
                                                                LCD_movecursor(2,4);
 69e:	64 e0       	ldi	r22, 0x04	; 4
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
 6a6:	ef e3       	ldi	r30, 0x3F	; 63
 6a8:	fc e9       	ldi	r31, 0x9C	; 156
 6aa:	31 97       	sbiw	r30, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <main+0x282>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <main+0x288>
 6b0:	00 00       	nop
                                                                _delay_ms(20);
                                                                LCD_vSend_string("Well done");
 6b2:	8b e8       	ldi	r24, 0x8B	; 139
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 6ba:	ff ef       	ldi	r31, 0xFF	; 255
 6bc:	23 ef       	ldi	r18, 0xF3	; 243
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	f1 50       	subi	r31, 0x01	; 1
 6c2:	20 40       	sbci	r18, 0x00	; 0
 6c4:	80 40       	sbci	r24, 0x00	; 0
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <main+0x298>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <main+0x2a2>
 6ca:	00 00       	nop
                                                                _delay_ms(80);
                                                                LCD_clearscreen();
 6cc:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
 6d0:	2b c0       	rjmp	.+86     	; 0x728 <main+0x300>
                                                        }
                                                        else
                                                        {
                                                                LCD_clearscreen();
 6d2:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                                                LCD_movecursor(2,3);
 6d6:	63 e0       	ldi	r22, 0x03	; 3
 6d8:	82 e0       	ldi	r24, 0x02	; 2
 6da:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
                                                                LCD_vSend_string("Wrong answer");
 6de:	89 ec       	ldi	r24, 0xC9	; 201
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 6e6:	20 c0       	rjmp	.+64     	; 0x728 <main+0x300>
                                                        }
                                                }
                                                else
                                                {
                                                        LCD_clearscreen();
 6e8:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                                        LCD_movecursor(2,3);
 6ec:	63 e0       	ldi	r22, 0x03	; 3
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
                                                        LCD_vSend_string("Wrong answer");
 6f4:	89 ec       	ldi	r24, 0xC9	; 201
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 6fc:	15 c0       	rjmp	.+42     	; 0x728 <main+0x300>
                                                }
                                        }
                                        else
                                        {
                                                LCD_clearscreen();
 6fe:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                                LCD_movecursor(2,3);
 702:	63 e0       	ldi	r22, 0x03	; 3
 704:	82 e0       	ldi	r24, 0x02	; 2
 706:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
                                                LCD_vSend_string("Wrong answer");
 70a:	89 ec       	ldi	r24, 0xC9	; 201
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
 712:	0a c0       	rjmp	.+20     	; 0x728 <main+0x300>
                                        }
                                }else
                                {
                                        LCD_clearscreen();
 714:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearscreen>
                                        LCD_movecursor(2,3);
 718:	63 e0       	ldi	r22, 0x03	; 3
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_movecursor>
                                        LCD_vSend_string("Wrong answer");
 720:	89 ec       	ldi	r24, 0xC9	; 201
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_vSend_string>
                                }
                                                        
}
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	08 95       	ret

00000732 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
 732:	1f 92       	push	r1
 734:	0f 92       	push	r0
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	0f 92       	push	r0
 73a:	11 24       	eor	r1, r1
 73c:	8f 93       	push	r24
 73e:	9f 93       	push	r25
        flag1++;
 740:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <flag1>
 744:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <flag1+0x1>
 748:	01 96       	adiw	r24, 0x01	; 1
 74a:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <flag1+0x1>
 74e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <flag1>
 752:	9f 91       	pop	r25
 754:	8f 91       	pop	r24
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <keypad_vInit>:
 *  Author: Mohamed Zaghlol
 */ 
 #include "keypad_driver.h"
 void keypad_vInit()
 {
	 DIO_vsetPINDir('A',0,1);
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	81 e4       	ldi	r24, 0x41	; 65
 766:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',1,1);
 76a:	41 e0       	ldi	r20, 0x01	; 1
 76c:	61 e0       	ldi	r22, 0x01	; 1
 76e:	81 e4       	ldi	r24, 0x41	; 65
 770:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',2,1);
 774:	41 e0       	ldi	r20, 0x01	; 1
 776:	62 e0       	ldi	r22, 0x02	; 2
 778:	81 e4       	ldi	r24, 0x41	; 65
 77a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',3,1);
 77e:	41 e0       	ldi	r20, 0x01	; 1
 780:	63 e0       	ldi	r22, 0x03	; 3
 782:	81 e4       	ldi	r24, 0x41	; 65
 784:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',4,0);
 788:	40 e0       	ldi	r20, 0x00	; 0
 78a:	64 e0       	ldi	r22, 0x04	; 4
 78c:	81 e4       	ldi	r24, 0x41	; 65
 78e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',5,0);
 792:	40 e0       	ldi	r20, 0x00	; 0
 794:	65 e0       	ldi	r22, 0x05	; 5
 796:	81 e4       	ldi	r24, 0x41	; 65
 798:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',6,0);
 79c:	40 e0       	ldi	r20, 0x00	; 0
 79e:	66 e0       	ldi	r22, 0x06	; 6
 7a0:	81 e4       	ldi	r24, 0x41	; 65
 7a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',7,0);
 7a6:	40 e0       	ldi	r20, 0x00	; 0
 7a8:	67 e0       	ldi	r22, 0x07	; 7
 7aa:	81 e4       	ldi	r24, 0x41	; 65
 7ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vconnectpullup('A',4,1);
 7b0:	41 e0       	ldi	r20, 0x01	; 1
 7b2:	64 e0       	ldi	r22, 0x04	; 4
 7b4:	81 e4       	ldi	r24, 0x41	; 65
 7b6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_vconnectpullup>
	 DIO_vconnectpullup('A',5,1);
 7ba:	41 e0       	ldi	r20, 0x01	; 1
 7bc:	65 e0       	ldi	r22, 0x05	; 5
 7be:	81 e4       	ldi	r24, 0x41	; 65
 7c0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_vconnectpullup>
	 DIO_vconnectpullup('A',6,1);
 7c4:	41 e0       	ldi	r20, 0x01	; 1
 7c6:	66 e0       	ldi	r22, 0x06	; 6
 7c8:	81 e4       	ldi	r24, 0x41	; 65
 7ca:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_vconnectpullup>
	 DIO_vconnectpullup('A',7,1);
 7ce:	41 e0       	ldi	r20, 0x01	; 1
 7d0:	67 e0       	ldi	r22, 0x07	; 7
 7d2:	81 e4       	ldi	r24, 0x41	; 65
 7d4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_vconnectpullup>
 7d8:	08 95       	ret

000007da <keypad_u8check_press>:
	  
 }
 char keypad_u8check_press()
 {
 7da:	0f 93       	push	r16
 7dc:	1f 93       	push	r17
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
 7e6:	60 97       	sbiw	r28, 0x10	; 16
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	f8 94       	cli
 7ec:	de bf       	out	0x3e, r29	; 62
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 7f2:	80 e1       	ldi	r24, 0x10	; 16
 7f4:	e0 e6       	ldi	r30, 0x60	; 96
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	de 01       	movw	r26, r28
 7fa:	11 96       	adiw	r26, 0x01	; 1
 7fc:	01 90       	ld	r0, Z+
 7fe:	0d 92       	st	X+, r0
 800:	8a 95       	dec	r24
 802:	e1 f7       	brne	.-8      	; 0x7fc <keypad_u8check_press+0x22>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
 804:	00 e0       	ldi	r16, 0x00	; 0
	 {
	 DIO_write('A',0,1);
 806:	41 e0       	ldi	r20, 0x01	; 1
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	81 e4       	ldi	r24, 0x41	; 65
 80c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	 DIO_write('A',1,1);
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	61 e0       	ldi	r22, 0x01	; 1
 814:	81 e4       	ldi	r24, 0x41	; 65
 816:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	 DIO_write('A',2,1);
 81a:	41 e0       	ldi	r20, 0x01	; 1
 81c:	62 e0       	ldi	r22, 0x02	; 2
 81e:	81 e4       	ldi	r24, 0x41	; 65
 820:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	 DIO_write('A',3,1);
 824:	41 e0       	ldi	r20, 0x01	; 1
 826:	63 e0       	ldi	r22, 0x03	; 3
 828:	81 e4       	ldi	r24, 0x41	; 65
 82a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	 DIO_write('A',row,0);
 82e:	40 e0       	ldi	r20, 0x00	; 0
 830:	60 2f       	mov	r22, r16
 832:	81 e4       	ldi	r24, 0x41	; 65
 834:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	
		for(coloumn=0;coloumn<4;coloumn++)
 838:	10 e0       	ldi	r17, 0x00	; 0
		{
		 x=DIO_u8read('A',(coloumn+4));
 83a:	64 e0       	ldi	r22, 0x04	; 4
 83c:	61 0f       	add	r22, r17
 83e:	81 e4       	ldi	r24, 0x41	; 65
 840:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8read>
		 if(x==0)
 844:	81 11       	cpse	r24, r1
 846:	0d c0       	rjmp	.+26     	; 0x862 <__stack+0x3>
			 {
			 returnval=arr[row][coloumn];
 848:	e1 e0       	ldi	r30, 0x01	; 1
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	ec 0f       	add	r30, r28
 84e:	fd 1f       	adc	r31, r29
 850:	84 e0       	ldi	r24, 0x04	; 4
 852:	08 9f       	mul	r16, r24
 854:	e0 0d       	add	r30, r0
 856:	f1 1d       	adc	r31, r1
 858:	11 24       	eor	r1, r1
 85a:	e1 0f       	add	r30, r17
 85c:	f1 1d       	adc	r31, r1
 85e:	80 81       	ld	r24, Z
 860:	07 c0       	rjmp	.+14     	; 0x870 <__stack+0x11>
	 DIO_write('A',1,1);
	 DIO_write('A',2,1);
	 DIO_write('A',3,1);
	 DIO_write('A',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
 862:	1f 5f       	subi	r17, 0xFF	; 255
 864:	14 30       	cpi	r17, 0x04	; 4
 866:	49 f7       	brne	.-46     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 char keypad_u8check_press()
 {
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
 868:	0f 5f       	subi	r16, 0xFF	; 255
 86a:	04 30       	cpi	r16, 0x04	; 4
 86c:	61 f6       	brne	.-104    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 86e:	8f ef       	ldi	r24, 0xFF	; 255
		{
		 break;
		}
	 }	 
	 return returnval ;	 
 870:	60 96       	adiw	r28, 0x10	; 16
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	f8 94       	cli
 876:	de bf       	out	0x3e, r29	; 62
 878:	0f be       	out	0x3f, r0	; 63
 87a:	cd bf       	out	0x3d, r28	; 61
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	08 95       	ret

00000886 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 886:	41 e0       	ldi	r20, 0x01	; 1
 888:	62 e0       	ldi	r22, 0x02	; 2
 88a:	82 e4       	ldi	r24, 0x42	; 66
 88c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 890:	8f e9       	ldi	r24, 0x9F	; 159
 892:	9f e0       	ldi	r25, 0x0F	; 15
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	f1 f7       	brne	.-4      	; 0x894 <send_falling_edge+0xe>
 898:	00 c0       	rjmp	.+0      	; 0x89a <send_falling_edge+0x14>
 89a:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 89c:	40 e0       	ldi	r20, 0x00	; 0
 89e:	62 e0       	ldi	r22, 0x02	; 2
 8a0:	82 e4       	ldi	r24, 0x42	; 66
 8a2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 8a6:	8f e9       	ldi	r24, 0x9F	; 159
 8a8:	9f e0       	ldi	r25, 0x0F	; 15
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	f1 f7       	brne	.-4      	; 0x8aa <send_falling_edge+0x24>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <send_falling_edge+0x2a>
 8b0:	00 00       	nop
 8b2:	08 95       	ret

000008b4 <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
 8b4:	cf 93       	push	r28
 8b6:	c8 2f       	mov	r28, r24
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('B',cmd>>4);
 8b8:	68 2f       	mov	r22, r24
 8ba:	62 95       	swap	r22
 8bc:	6f 70       	andi	r22, 0x0F	; 15
 8be:	82 e4       	ldi	r24, 0x42	; 66
 8c0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <write_high_nibble>
	DIO_write('B',RS,0);
 8c4:	40 e0       	ldi	r20, 0x00	; 0
 8c6:	60 e0       	ldi	r22, 0x00	; 0
 8c8:	82 e4       	ldi	r24, 0x42	; 66
 8ca:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 8ce:	0e 94 43 04 	call	0x886	; 0x886 <send_falling_edge>
	write_high_nibble('B',cmd);
 8d2:	6c 2f       	mov	r22, r28
 8d4:	82 e4       	ldi	r24, 0x42	; 66
 8d6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <write_high_nibble>
	DIO_write('B',RS,0);
 8da:	40 e0       	ldi	r20, 0x00	; 0
 8dc:	60 e0       	ldi	r22, 0x00	; 0
 8de:	82 e4       	ldi	r24, 0x42	; 66
 8e0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 8e4:	0e 94 43 04 	call	0x886	; 0x886 <send_falling_edge>
 8e8:	8f ec       	ldi	r24, 0xCF	; 207
 8ea:	97 e0       	ldi	r25, 0x07	; 7
 8ec:	01 97       	sbiw	r24, 0x01	; 1
 8ee:	f1 f7       	brne	.-4      	; 0x8ec <LCD_vSend_cmd+0x38>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <LCD_vSend_cmd+0x3e>
 8f2:	00 00       	nop
	#endif
	_delay_ms(1);
}
 8f4:	cf 91       	pop	r28
 8f6:	08 95       	ret

000008f8 <LCD_vInit>:
 8f8:	2f ef       	ldi	r18, 0xFF	; 255
 8fa:	81 ee       	ldi	r24, 0xE1	; 225
 8fc:	94 e0       	ldi	r25, 0x04	; 4
 8fe:	21 50       	subi	r18, 0x01	; 1
 900:	80 40       	sbci	r24, 0x00	; 0
 902:	90 40       	sbci	r25, 0x00	; 0
 904:	e1 f7       	brne	.-8      	; 0x8fe <LCD_vInit+0x6>
 906:	00 c0       	rjmp	.+0      	; 0x908 <LCD_vInit+0x10>
 908:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('B',4,1);
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	64 e0       	ldi	r22, 0x04	; 4
 90e:	82 e4       	ldi	r24, 0x42	; 66
 910:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',5,1);
 914:	41 e0       	ldi	r20, 0x01	; 1
 916:	65 e0       	ldi	r22, 0x05	; 5
 918:	82 e4       	ldi	r24, 0x42	; 66
 91a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',6,1);
 91e:	41 e0       	ldi	r20, 0x01	; 1
 920:	66 e0       	ldi	r22, 0x06	; 6
 922:	82 e4       	ldi	r24, 0x42	; 66
 924:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',7,1);
 928:	41 e0       	ldi	r20, 0x01	; 1
 92a:	67 e0       	ldi	r22, 0x07	; 7
 92c:	82 e4       	ldi	r24, 0x42	; 66
 92e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 932:	41 e0       	ldi	r20, 0x01	; 1
 934:	62 e0       	ldi	r22, 0x02	; 2
 936:	82 e4       	ldi	r24, 0x42	; 66
 938:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 93c:	41 e0       	ldi	r20, 0x01	; 1
 93e:	61 e0       	ldi	r22, 0x01	; 1
 940:	82 e4       	ldi	r24, 0x42	; 66
 942:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 946:	41 e0       	ldi	r20, 0x01	; 1
 948:	60 e0       	ldi	r22, 0x00	; 0
 94a:	82 e4       	ldi	r24, 0x42	; 66
 94c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
   	DIO_write('B',RW,0);
 950:	40 e0       	ldi	r20, 0x00	; 0
 952:	61 e0       	ldi	r22, 0x01	; 1
 954:	82 e4       	ldi	r24, 0x42	; 66
 956:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
 95a:	82 e0       	ldi	r24, 0x02	; 2
 95c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_vSend_cmd>
 960:	8f e1       	ldi	r24, 0x1F	; 31
 962:	9e e4       	ldi	r25, 0x4E	; 78
 964:	01 97       	sbiw	r24, 0x01	; 1
 966:	f1 f7       	brne	.-4      	; 0x964 <LCD_vInit+0x6c>
 968:	00 c0       	rjmp	.+0      	; 0x96a <LCD_vInit+0x72>
 96a:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
 96c:	88 e2       	ldi	r24, 0x28	; 40
 96e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_vSend_cmd>
 972:	8f ec       	ldi	r24, 0xCF	; 207
 974:	97 e0       	ldi	r25, 0x07	; 7
 976:	01 97       	sbiw	r24, 0x01	; 1
 978:	f1 f7       	brne	.-4      	; 0x976 <LCD_vInit+0x7e>
 97a:	00 c0       	rjmp	.+0      	; 0x97c <LCD_vInit+0x84>
 97c:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 97e:	8e e0       	ldi	r24, 0x0E	; 14
 980:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_vSend_cmd>
 984:	8f ec       	ldi	r24, 0xCF	; 207
 986:	97 e0       	ldi	r25, 0x07	; 7
 988:	01 97       	sbiw	r24, 0x01	; 1
 98a:	f1 f7       	brne	.-4      	; 0x988 <LCD_vInit+0x90>
 98c:	00 c0       	rjmp	.+0      	; 0x98e <LCD_vInit+0x96>
 98e:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_vSend_cmd>
 996:	8f e1       	ldi	r24, 0x1F	; 31
 998:	9e e4       	ldi	r25, 0x4E	; 78
 99a:	01 97       	sbiw	r24, 0x01	; 1
 99c:	f1 f7       	brne	.-4      	; 0x99a <LCD_vInit+0xa2>
 99e:	00 c0       	rjmp	.+0      	; 0x9a0 <LCD_vInit+0xa8>
 9a0:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 9a2:	86 e0       	ldi	r24, 0x06	; 6
 9a4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_vSend_cmd>
 9a8:	8f ec       	ldi	r24, 0xCF	; 207
 9aa:	97 e0       	ldi	r25, 0x07	; 7
 9ac:	01 97       	sbiw	r24, 0x01	; 1
 9ae:	f1 f7       	brne	.-4      	; 0x9ac <LCD_vInit+0xb4>
 9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <LCD_vInit+0xba>
 9b2:	00 00       	nop
 9b4:	08 95       	ret

000009b6 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 9b6:	cf 93       	push	r28
 9b8:	c8 2f       	mov	r28, r24
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('B',data>>4);
 9ba:	68 2f       	mov	r22, r24
 9bc:	62 95       	swap	r22
 9be:	6f 70       	andi	r22, 0x0F	; 15
 9c0:	82 e4       	ldi	r24, 0x42	; 66
 9c2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <write_high_nibble>
	DIO_write('B',RS,1);
 9c6:	41 e0       	ldi	r20, 0x01	; 1
 9c8:	60 e0       	ldi	r22, 0x00	; 0
 9ca:	82 e4       	ldi	r24, 0x42	; 66
 9cc:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 9d0:	0e 94 43 04 	call	0x886	; 0x886 <send_falling_edge>
	write_high_nibble('B',data);
 9d4:	6c 2f       	mov	r22, r28
 9d6:	82 e4       	ldi	r24, 0x42	; 66
 9d8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <write_high_nibble>
	DIO_write('B',RS,1);
 9dc:	41 e0       	ldi	r20, 0x01	; 1
 9de:	60 e0       	ldi	r22, 0x00	; 0
 9e0:	82 e4       	ldi	r24, 0x42	; 66
 9e2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 9e6:	0e 94 43 04 	call	0x886	; 0x886 <send_falling_edge>
 9ea:	8f ec       	ldi	r24, 0xCF	; 207
 9ec:	97 e0       	ldi	r25, 0x07	; 7
 9ee:	01 97       	sbiw	r24, 0x01	; 1
 9f0:	f1 f7       	brne	.-4      	; 0x9ee <LCD_vSend_char+0x38>
 9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <LCD_vSend_char+0x3e>
 9f4:	00 00       	nop
	#endif
	_delay_ms(1);
}
 9f6:	cf 91       	pop	r28
 9f8:	08 95       	ret

000009fa <LCD_vSend_string>:

void LCD_vSend_string(char *data)
{
 9fa:	cf 93       	push	r28
 9fc:	df 93       	push	r29
 9fe:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 a00:	88 81       	ld	r24, Y
 a02:	88 23       	and	r24, r24
 a04:	31 f0       	breq	.+12     	; 0xa12 <LCD_vSend_string+0x18>
 a06:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vSend_char(*data);
 a08:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCD_vSend_char>
	_delay_ms(1);
}

void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 a0c:	89 91       	ld	r24, Y+
 a0e:	81 11       	cpse	r24, r1
 a10:	fb cf       	rjmp	.-10     	; 0xa08 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	08 95       	ret

00000a18 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_vSend_cmd>
 a1e:	8f e1       	ldi	r24, 0x1F	; 31
 a20:	9e e4       	ldi	r25, 0x4E	; 78
 a22:	01 97       	sbiw	r24, 0x01	; 1
 a24:	f1 f7       	brne	.-4      	; 0xa22 <LCD_clearscreen+0xa>
 a26:	00 c0       	rjmp	.+0      	; 0xa28 <LCD_clearscreen+0x10>
 a28:	00 00       	nop
 a2a:	08 95       	ret

00000a2c <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 a2c:	9f ef       	ldi	r25, 0xFF	; 255
 a2e:	98 0f       	add	r25, r24
 a30:	92 30       	cpi	r25, 0x02	; 2
 a32:	70 f4       	brcc	.+28     	; 0xa50 <LCD_movecursor+0x24>
 a34:	9f ef       	ldi	r25, 0xFF	; 255
 a36:	96 0f       	add	r25, r22
 a38:	90 31       	cpi	r25, 0x10	; 16
 a3a:	60 f4       	brcc	.+24     	; 0xa54 <LCD_movecursor+0x28>
	{
		data=0x80;
	}
	else if(row==1)
 a3c:	81 30       	cpi	r24, 0x01	; 1
 a3e:	19 f4       	brne	.+6      	; 0xa46 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 a40:	2f e7       	ldi	r18, 0x7F	; 127
 a42:	26 0f       	add	r18, r22
 a44:	08 c0       	rjmp	.+16     	; 0xa56 <LCD_movecursor+0x2a>
	}
	else if (row==2)
 a46:	82 30       	cpi	r24, 0x02	; 2
 a48:	31 f4       	brne	.+12     	; 0xa56 <LCD_movecursor+0x2a>
	{
		data=0xc0+coloumn-1;
 a4a:	2f eb       	ldi	r18, 0xBF	; 191
 a4c:	26 0f       	add	r18, r22
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <LCD_movecursor+0x2a>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 a50:	20 e8       	ldi	r18, 0x80	; 128
 a52:	01 c0       	rjmp	.+2      	; 0xa56 <LCD_movecursor+0x2a>
 a54:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 a56:	82 2f       	mov	r24, r18
 a58:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_vSend_cmd>
 a5c:	8f ec       	ldi	r24, 0xCF	; 207
 a5e:	97 e0       	ldi	r25, 0x07	; 7
 a60:	01 97       	sbiw	r24, 0x01	; 1
 a62:	f1 f7       	brne	.-4      	; 0xa60 <LCD_movecursor+0x34>
 a64:	00 c0       	rjmp	.+0      	; 0xa66 <LCD_movecursor+0x3a>
 a66:	00 00       	nop
 a68:	08 95       	ret

00000a6a <timer_CTC_init_interrupt>:
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 a6a:	83 b7       	in	r24, 0x33	; 51
 a6c:	88 60       	ori	r24, 0x08	; 8
 a6e:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=78;
 a70:	8e e4       	ldi	r24, 0x4E	; 78
 a72:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
 a74:	83 b7       	in	r24, 0x33	; 51
 a76:	81 60       	ori	r24, 0x01	; 1
 a78:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 a7a:	83 b7       	in	r24, 0x33	; 51
 a7c:	84 60       	ori	r24, 0x04	; 4
 a7e:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
 a80:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 a82:	89 b7       	in	r24, 0x39	; 57
 a84:	82 60       	ori	r24, 0x02	; 2
 a86:	89 bf       	out	0x39, r24	; 57
 a88:	08 95       	ret

00000a8a <_exit>:
 a8a:	f8 94       	cli

00000a8c <__stop_program>:
 a8c:	ff cf       	rjmp	.-2      	; 0xa8c <__stop_program>
